name: Deploy
on:
  push:
    branches:
      - develop
      - master

jobs:
  setEnv:
    name: Set environment
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.setEnv.outputs.env }}
    steps:
      - name: setEnv
        run: |
          if [[ ${{ contains(github.ref, 'develop') }} ]]; then
            echo '::set-output name=env::uat'
          fi
          if [[ ${{ contains(github.ref, 'master') }} ]]; then
            echo '::set-output name=env::prod'
          fi
        id: setEnv
      - name: Echo
        run: echo ${{ steps.setEnv.outputs.env }}

  deploy:
    name: Deploy to ${{ needs.setEnv.outputs.env }}
    runs-on: ubuntu-latest
    needs: setEnv

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: blog
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-${{ needs.setEnv.outputs.env }}.json
          container-name: ${{ needs.setEnv.outputs.env }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ needs.setEnv.outputs.env }}
          cluster: blog
          wait-for-service-stability: true
