import { ParsedUrlQuery } from "querystring";

import { fireEvent } from "@testing-library/react";
import { GetServerSidePropsContext } from "next";

import { renderWithRouter, router } from "jestUtils/renderWithRouter";
import MOCK_POSTS from "localDatabase/mockPosts.json";

import Blog, { getServerSideProps } from "..";

jest.mock("@controllers/posts");
const MOCK_POST_ARRAY = Object.values(MOCK_POSTS);

describe("components/pages/blog", () => {
  describe("Blog", () => {
    it("should render", () => {
      const { container } = renderWithRouter(<Blog posts={[]} />);

      expect(container.firstChild).toMatchInlineSnapshot(`
        ._gRLvIW {
          top: 0px;
        }

        ._kNPsCO {
          left: 0px;
        }

        ._fPWUjy {
          bottom: 0px;
        }

        ._iOSeYB {
          right: 0px;
        }

        ._kQbbfG {
          position: fixed;
        }

        ._fQyOJs {
          z-index: -1;
        }

        ._jtlYiP {
          width: 100%;
        }

        ._kYEQLm {
          height: 100%;
        }

        ._euMrem {
          background-color: var(--colors-background);
        }

        <div
          class="_fQyOJs _kQbbfG _iOSeYB _fPWUjy _kNPsCO _gRLvIW scid-PJLV"
        >
          <div
            class="_euMrem _kYEQLm _jtlYiP scid-PJLV"
          />
        </div>
      `);
    });

    it("should navigate to a post on click", () => {
      const { getByText } = renderWithRouter(<Blog posts={Object.values(MOCK_POST_ARRAY)} />);

      fireEvent.click(getByText(MOCK_POST_ARRAY[0].title));

      expect(router.push).toHaveBeenCalledWith(`/blog/${MOCK_POST_ARRAY[0].id}`);
    });
  });

  describe("getServerSideProps", () => {
    it("should return the posts generated by PostsController", async () => {
      const props = await getServerSideProps({} as GetServerSidePropsContext<ParsedUrlQuery>);
      expect(props).toEqual({ props: { posts: MOCK_POST_ARRAY } });
    });
  });
});
